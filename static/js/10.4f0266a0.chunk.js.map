{"version":3,"sources":["../node_modules/@rhazn/logic-components/dist/esm/world-selector.entry.js"],"names":["WorldSelector","hostRef","registerInstance","this","worldSelected","createEvent","worldDeselected","worlds","selectedWorldIndices","index","emit","filter","worldIndex","h","Host","class","map","world","includes","onClick","handleWorldDeselected","handleWorldSelected","style"],"mappings":"uNAIMA,EAAa,WACjB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,cAAgBC,YAAYF,KAAM,gBAAiB,GACxDA,KAAKG,gBAAkBD,YAAYF,KAAM,kBAAmB,GAI5DA,KAAKI,OAAS,GACdJ,KAAKK,qBAAuB,GATb,8DAWjB,WACEL,KAAKK,qBAAuB,KAZb,iCAcjB,SAAoBC,GAClBN,KAAKK,qBAAL,sBAAgCL,KAAKK,sBAArC,CAA2DC,IAC3DN,KAAKC,cAAcM,KAAKP,KAAKI,OAAOE,MAhBrB,mCAkBjB,SAAsBA,GACpBN,KAAKK,qBAAuBL,KAAKK,qBAAqBG,QAAO,SAAAC,GAAU,OAAIA,IAAeH,KAC1FN,KAAKG,gBAAgBI,KAAKP,KAAKI,OAAOE,MApBvB,oBAsBjB,WAAS,WACP,OAAQI,YAAEC,IAAM,KAAMD,YAAE,MAAO,CAAEE,MAAO,kBAAoBZ,KAAKI,OAAOS,KAAI,SAACC,EAAOR,GAAR,OAAmBI,YAAE,gCAAiC,CAAEE,MAAO,gDAAF,OAAkD,EAAKP,qBAAqBU,SAAST,GAAS,WAAa,cAAgBU,QAAS,kBAAM,EAAKX,qBAAqBU,SAAST,GAChT,EAAKW,sBAAsBX,GAC3B,EAAKY,oBAAoBZ,IAAQQ,MAAOA,YAzB/B,qBA2BjB,WAAwB,MAAO,CAC7B,OAAU,CAAC,mCA5BI,KA+BnBjB,EAAcsB,MAjCW","file":"static/js/10.4f0266a0.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host } from './index-e495c8fa.js';\n\nconst worldSelectorCss = \":host{display:block}.world-selector{display:flex;flex-direction:row;flex-wrap:wrap;padding:0.5rem;justify-content:flex-start}.world-selector__world{cursor:pointer;margin:0.5rem}.world-selector__world__selected{background-color:lightblue}\";\n\nconst WorldSelector = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.worldSelected = createEvent(this, \"worldSelected\", 7);\n    this.worldDeselected = createEvent(this, \"worldDeselected\", 7);\n    /**\n     * List of worlds\n     */\n    this.worlds = [];\n    this.selectedWorldIndices = [];\n  }\n  updatePreferenceFromWorlds() {\n    this.selectedWorldIndices = [];\n  }\n  handleWorldSelected(index) {\n    this.selectedWorldIndices = [...this.selectedWorldIndices, index];\n    this.worldSelected.emit(this.worlds[index]);\n  }\n  handleWorldDeselected(index) {\n    this.selectedWorldIndices = this.selectedWorldIndices.filter(worldIndex => worldIndex !== index);\n    this.worldDeselected.emit(this.worlds[index]);\n  }\n  render() {\n    return (h(Host, null, h(\"div\", { class: \"world-selector\" }, this.worlds.map((world, index) => (h(\"propositional-world-component\", { class: `world-selector__world world-selector__world__${this.selectedWorldIndices.includes(index) ? \"selected\" : \"unselected\"}`, onClick: () => this.selectedWorldIndices.includes(index)\n        ? this.handleWorldDeselected(index)\n        : this.handleWorldSelected(index), world: world }))))));\n  }\n  static get watchers() { return {\n    \"worlds\": [\"updatePreferenceFromWorlds\"]\n  }; }\n};\nWorldSelector.style = worldSelectorCss;\n\nexport { WorldSelector as world_selector };\n"],"sourceRoot":""}