{"version":3,"sources":["../node_modules/@rhazn/logic-components/dist/esm/world-preference-component.entry.js"],"names":["PropositionalWorld","signature","assignment","this","JSON","stringify","signatureSize","size","result","ArrayBuffer","PropositionalWorldParserFactory","getMinimalByteSignatureSize","getMinimalViewForSignatureSize","getWorldNumber","reduce","previous","current","index","has","Math","pow","json","parsed","parse","Set","binary","view","worldFromNumber","number","toString","padStart","concat","buffer","Uint8Array","Uint16Array","Uint32Array","BYTES_PER_ELEMENT","WorldPreference","data","map","rank","world","numberOfWorlds","totalWorlds","currentRank","length","numberOfFilledRanks","DataView","setUint8","setUint32","addedRanks","addedWorlds","i","rankOffset","nextFilledRankIndex","slice","findIndex","worldOffset","j","setUint16","WorldPreferenceComponent","hostRef","registerInstance","preferenceChanged","createEvent","allowEmptyRows","preference","internalPreference","event","draggedWorld","rankIndex","target","dataset","worldIndex","preventDefault","stopPropagation","oldRank","oldIndex","newPreference","filter","_","newRank","eventPath","path","composedPath","element","undefined","rankindex","manageEmptyRows","emitChange","updateInternalPreference","push","row","emit","h","Host","class","reverse","onDragOver","e","dragOverHandler","onDrop","dragDropHandler","draggable","onDragStart","dragStartHandler","style"],"mappings":"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","file":"static/js/9.6a719c33.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host } from './index-e495c8fa.js';\n\nclass PropositionalWorld {\n    constructor(signature, assignment) {\n        this.signature = signature;\n        this.assignment = assignment;\n    }\n    toJson() {\n        return JSON.stringify([...this.assignment]);\n    }\n    toBinary() {\n        const signatureSize = this.signature.size;\n        const result = new ArrayBuffer(PropositionalWorldParserFactory.getMinimalByteSignatureSize(signatureSize));\n        const view = PropositionalWorldParserFactory.getMinimalViewForSignatureSize(signatureSize, result);\n        view[0] = this.getWorldNumber();\n        return result;\n    }\n    getWorldNumber() {\n        return [...this.signature].reduce((previous, current, index) => {\n            return previous + (this.assignment.has(current) ? Math.pow(2, this.signature.size - 1 - index) : 0);\n        }, 0);\n    }\n}\n\nclass PropositionalWorldParserFactory {\n    constructor(signature) {\n        this.signature = signature;\n    }\n    fromJson(json) {\n        const parsed = JSON.parse(json);\n        return new PropositionalWorld(this.signature, new Set(parsed));\n    }\n    fromBinary(binary) {\n        const view = PropositionalWorldParserFactory.getMinimalViewForSignatureSize(this.signature.size, binary);\n        return PropositionalWorldParserFactory.worldFromNumber(this.signature, view[0]);\n    }\n    static worldFromNumber(signature, number) {\n        const assignment = [...number.toString(2).padStart(signature.size, \"0\")].reduce((previous, current, index) => {\n            return previous.concat(current === \"1\" ? [...signature][index] : []);\n        }, []);\n        return new PropositionalWorld(signature, new Set(assignment));\n    }\n    static getMinimalViewForSignatureSize(size, buffer) {\n        if (size <= 8) {\n            return new Uint8Array(buffer);\n        }\n        if (size <= 16) {\n            return new Uint16Array(buffer);\n        }\n        return new Uint32Array(buffer);\n    }\n    static getMinimalByteSignatureSize(size) {\n        if (size <= 8) {\n            return Uint8Array.BYTES_PER_ELEMENT;\n        }\n        if (size <= 16) {\n            return Uint16Array.BYTES_PER_ELEMENT;\n        }\n        return Uint32Array.BYTES_PER_ELEMENT;\n    }\n}\n\nclass WorldPreference {\n    constructor(data) {\n        this.data = data;\n    }\n    toJson() {\n        return JSON.stringify(this.data.map(rank => rank.map(world => [...world.assignment])));\n    }\n    toBinary() {\n        const numberOfWorlds = this.data.reduce((totalWorlds, currentRank) => {\n            return totalWorlds + currentRank.length;\n        }, 0);\n        const numberOfFilledRanks = this.data.reduce((totalWorlds, currentRank) => {\n            return totalWorlds + (currentRank.length > 0 ? 1 : 0);\n        }, 0);\n        if (numberOfFilledRanks === 0) {\n            return new ArrayBuffer(0);\n        }\n        // todo get signaturesize from a concrete world, dont guess 0,0 is filled\n        const signatureSize = this.data[0][0].signature.size;\n        const result = new ArrayBuffer(\n        // Version\n        Uint8Array.BYTES_PER_ELEMENT +\n            // Signature size\n            Uint32Array.BYTES_PER_ELEMENT +\n            // Number of worlds in rank + distance to next rank\n            numberOfFilledRanks * (Uint32Array.BYTES_PER_ELEMENT * 2) +\n            // actual worlds\n            numberOfWorlds * PropositionalWorldParserFactory.getMinimalByteSignatureSize(signatureSize));\n        const view = new DataView(result);\n        // Version\n        view.setUint8(0, 1);\n        // Signature size\n        view.setUint32(Uint8Array.BYTES_PER_ELEMENT, signatureSize);\n        let addedRanks = 0;\n        let addedWorlds = 0;\n        for (let i = 0; i < this.data.length; i++) {\n            const rank = this.data[i];\n            if (rank.length === 0) {\n                continue;\n            }\n            const rankOffset = Uint8Array.BYTES_PER_ELEMENT +\n                Uint32Array.BYTES_PER_ELEMENT +\n                addedWorlds * PropositionalWorldParserFactory.getMinimalByteSignatureSize(signatureSize) +\n                addedRanks * Uint32Array.BYTES_PER_ELEMENT * 2;\n            const remainingRanks = this.data.slice(i + 1, this.data.length);\n            const nextFilledRankIndex = remainingRanks.findIndex(rank => rank.length > 0);\n            view.setUint32(rankOffset, rank.length);\n            view.setUint32(rankOffset + Uint32Array.BYTES_PER_ELEMENT, nextFilledRankIndex === -1 ? 0 : nextFilledRankIndex);\n            const worldOffset = rankOffset + Uint32Array.BYTES_PER_ELEMENT * 2;\n            for (let j = 0; j < rank.length; j++) {\n                const world = rank[j];\n                switch (PropositionalWorldParserFactory.getMinimalByteSignatureSize(signatureSize)) {\n                    case Uint8Array.BYTES_PER_ELEMENT:\n                        view.setUint8(worldOffset + j, world.getWorldNumber());\n                        break;\n                    case Uint16Array.BYTES_PER_ELEMENT:\n                        view.setUint16(worldOffset + j, world.getWorldNumber());\n                        break;\n                    case Uint32Array.BYTES_PER_ELEMENT:\n                        view.setUint32(worldOffset + j, world.getWorldNumber());\n                        break;\n                }\n            }\n            addedWorlds += rank.length;\n            addedRanks += 1;\n        }\n        return result;\n    }\n}\n\nconst worldPreferenceCss = \":host{display:block}.world-preference table{border-collapse:collapse}.world-preference__rank{border-bottom:1px solid black}.world-preference__rank__number{border-right:1px solid black;padding:0.5rem;font-weight:700}.world-preference__rank__worlds *{display:inline-block;margin:0.5rem;cursor:pointer}\";\n\nconst WorldPreferenceComponent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.preferenceChanged = createEvent(this, \"preferenceChanged\", 7);\n    /**\n     * Allow empty rows or not\n     */\n    this.allowEmptyRows = false;\n    /**\n     * Preference over worlds\n     */\n    this.preference = new WorldPreference([]);\n    this.internalPreference = new WorldPreference([]);\n  }\n  dragStartHandler(event) {\n    this.draggedWorld = {\n      rankIndex: +event.target.dataset.rank,\n      worldIndex: +event.target.dataset.index,\n    };\n  }\n  dragOverHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  dragDropHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const oldRank = this.draggedWorld.rankIndex;\n    const oldIndex = this.draggedWorld.worldIndex;\n    const world = this.internalPreference.data[oldRank][oldIndex];\n    const newPreference = [...this.internalPreference.data];\n    newPreference[oldRank] = newPreference[oldRank].filter((_, index) => index !== oldIndex);\n    let newRank = 0;\n    const eventPath = event.path || (event.composedPath && event.composedPath());\n    for (let i = 0; i < eventPath.length; i++) {\n      const element = eventPath[i];\n      if (element.dataset && element.dataset.rankindex !== undefined) {\n        newRank = +element.dataset.rankindex;\n        break;\n      }\n    }\n    newPreference[newRank] = [...newPreference[newRank], world];\n    this.internalPreference = new WorldPreference(this.manageEmptyRows(newPreference));\n    this.emitChange();\n  }\n  updateInternalPreference(newPreference) {\n    this.internalPreference = new WorldPreference(this.manageEmptyRows(newPreference.data));\n  }\n  componentWillLoad() {\n    this.updateInternalPreference(this.preference);\n  }\n  manageEmptyRows(preference) {\n    if (preference === undefined || preference.length === 0) {\n      return this.allowEmptyRows ? [[], []] : [[]];\n    }\n    for (var i = preference.length - 1; i >= 0; i--) {\n      if (preference[i].length !== 0) {\n        preference = preference.slice(0, i + 1);\n        break;\n      }\n    }\n    // add one or two additional empty rows on top to allow for creation of new ranks\n    preference.push([]);\n    if (this.allowEmptyRows) {\n      preference.push([]);\n    }\n    if (this.allowEmptyRows) {\n      return preference;\n    }\n    else {\n      // remove all empty rows but the last\n      return preference.filter((row, index) => {\n        if (row.length === 0) {\n          if (index < preference.length - 1) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n  }\n  emitChange() {\n    this.preferenceChanged.emit(new WorldPreference(this.internalPreference.data.slice(0, this.internalPreference.data.length - (this.allowEmptyRows ? 2 : 1))));\n  }\n  render() {\n    return (h(Host, null, h(\"div\", { class: \"world-preference\" }, h(\"table\", null, this.internalPreference.data\n      .slice()\n      .reverse()\n      .map((rank, index) => {\n      const rankIndex = this.internalPreference.data.length - 1 - index;\n      return (h(\"tr\", { class: \"world-preference__rank\", \"data-rankindex\": rankIndex, onDragOver: e => this.dragOverHandler(e), onDrop: e => this.dragDropHandler(e) }, h(\"td\", { class: \"world-preference__rank__number\" }, rankIndex), h(\"td\", { class: \"world-preference__rank__worlds\" }, rank.map((world, worldIndex) => (h(\"propositional-world-component\", { \"data-rank\": rankIndex, \"data-index\": worldIndex, draggable: true, onDragStart: e => this.dragStartHandler(e), world: world }))))));\n    })))));\n  }\n  static get watchers() { return {\n    \"preference\": [\"updateInternalPreference\"]\n  }; }\n};\nWorldPreferenceComponent.style = worldPreferenceCss;\n\nexport { WorldPreferenceComponent as world_preference_component };\n"],"sourceRoot":""}