{"version":3,"sources":["../node_modules/@rhazn/logic-components/dist/esm/formula-input.entry.js"],"names":["FormulaInput","hostRef","registerInstance","this","validFormulaEntered","createEvent","initialFormula","prevalidate","formula","validate","Promise","resolve","valid","postvalidate","validFormula","error","undefined","newValue","then","result","emit","h","Host","class","part","noValidate","autoComplete","name","htmlFor","href","target","rel","id","type","value","onInput","e","updateFormula","style"],"mappings":"8MAIMA,EAAY,WAChB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,oBAAsBC,YAAYF,KAAM,sBAAuB,GACpEA,KAAKG,eAAiB,GACtBH,KAAKI,YAAc,SAACC,GAAD,sCAAsCA,EAAtC,OACnBL,KAAKM,SAAW,kBAAMC,QAAQC,QAAQ,CAAEC,OAAO,KAC/CT,KAAKU,aAAe,SAACL,GAAD,OAAaA,GACjCL,KAAKK,QAAU,GACfL,KAAKW,aAAe,GACpBX,KAAKY,WAAQC,EAVC,qDAYhB,WACEb,KAAKK,QAAUL,KAAKG,iBAbN,iCAehB,SAAoBW,GAAU,WAC5B,IAAKA,EAGH,OAFAd,KAAKW,aAAeG,OACpBd,KAAKY,WAAQC,GAGf,IAAMR,EAAUL,KAAKI,YAAYU,GACjCd,KAAKM,SAASD,GAASU,MAAK,SAAAC,GAC1B,EAAKJ,MAAQI,EAAOJ,MAChBI,EAAOP,QACT,EAAKE,aAAe,EAAKD,aAAaL,SAzB5B,sCA6BhB,SAAyBS,GACvBd,KAAKC,oBAAoBgB,KAAKH,KA9BhB,wCAgChB,SAA2BA,GACzBd,KAAKK,QAAUS,IAjCD,2BAmChB,SAAcT,GACZL,KAAKK,QAAUA,IApCD,oBAsChB,WAAS,WACP,OAAQa,YAAEC,IAAM,KAAMD,YAAE,OAAQ,CAAEE,MAAO,OAAQC,KAAM,OAAQC,YAAY,EAAMC,aAAc,OAASL,YAAE,OAAQ,CAAEM,KAAM,SAAWN,YAAE,QAAS,CAAEO,QAAS,gBAAiBJ,KAAM,SAAW,YAAaH,YAAE,MAAO,CAAEE,MAAO,cAAeC,KAAM,eAAiBH,YAAE,OAAQ,CAAEM,KAAM,eAAiB,2BAA4BN,YAAE,IAAK,CAAEQ,KAAM,uBAAwBC,OAAQ,SAAUC,IAAK,uBAAyB,YAAa,MAAOV,YAAE,QAAS,CAAEW,GAAI,gBAAiBL,KAAM,gBAAiBM,KAAM,OAAQT,KAAM,QAASU,MAAO/B,KAAKK,QAAS2B,QAAS,SAACC,GAAD,OAAO,EAAKC,cAAcD,EAAEN,OAAOI,UAAW/B,KAAKY,OAAUM,YAAE,MAAO,CAAEE,MAAO,QAASC,KAAM,SAAWrB,KAAKY,YAvChoB,qBAyChB,WAAwB,MAAO,CAC7B,QAAW,CAAC,uBACZ,aAAgB,CAAC,4BACjB,eAAkB,CAAC,mCA5CL,KA+ClBf,EAAasC,MAjDW","file":"static/js/6.5a517904.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host } from './index-c0d54430.js';\n\nconst formulaInputCss = \":host{display:block}.form{display:flex;flex-direction:column}.error{color:red;padding:0.5rem 0}.description{color:grey;font-size:smaller;padding:0.5rem 0}\";\n\nconst FormulaInput = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.validFormulaEntered = createEvent(this, \"validFormulaEntered\", 7);\n    this.initialFormula = \"\";\n    this.prevalidate = (formula) => `fof('formula', axiom, ${formula}).`;\n    this.validate = () => Promise.resolve({ valid: true });\n    this.postvalidate = (formula) => formula;\n    this.formula = \"\";\n    this.validFormula = \"\";\n    this.error = undefined;\n  }\n  componentWillLoad() {\n    this.formula = this.initialFormula;\n  }\n  watchFormulaHandler(newValue) {\n    if (!newValue) {\n      this.validFormula = newValue;\n      this.error = undefined;\n      return;\n    }\n    const formula = this.prevalidate(newValue);\n    this.validate(formula).then(result => {\n      this.error = result.error;\n      if (result.valid) {\n        this.validFormula = this.postvalidate(formula);\n      }\n    });\n  }\n  watchValidFormulaHandler(newValue) {\n    this.validFormulaEntered.emit(newValue);\n  }\n  watchInitialFormulaHandler(newValue) {\n    this.formula = newValue;\n  }\n  updateFormula(formula) {\n    this.formula = formula;\n  }\n  render() {\n    return (h(Host, null, h(\"form\", { class: \"form\", part: \"form\", noValidate: true, autoComplete: \"off\" }, h(\"slot\", { name: \"label\" }, h(\"label\", { htmlFor: \"formula-input\", part: \"label\" }, \"Formula\")), h(\"div\", { class: \"description\", part: \"description\" }, h(\"slot\", { name: \"description\" }, \"Formula in TPTP syntax (\", h(\"a\", { href: \"http://www.tptp.org/\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"tptp.org\"), \")\")), h(\"input\", { id: \"formula-input\", name: \"formula-input\", type: \"text\", part: \"input\", value: this.formula, onInput: (e) => this.updateFormula(e.target.value) }), this.error && (h(\"div\", { class: \"error\", part: \"error\" }, this.error)))));\n  }\n  static get watchers() { return {\n    \"formula\": [\"watchFormulaHandler\"],\n    \"validFormula\": [\"watchValidFormulaHandler\"],\n    \"initialFormula\": [\"watchInitialFormulaHandler\"]\n  }; }\n};\nFormulaInput.style = formulaInputCss;\n\nexport { FormulaInput as formula_input };\n"],"sourceRoot":""}