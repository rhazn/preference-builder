{"version":3,"sources":["../node_modules/@rhazn/logic-components/dist/esm lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","App.tsx","reportWebVitals.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","App","useState","Set","signature","setSignature","preference","setPreference","isTPO","setIsTpo","jsonString","setJsonString","jsonError","setJsonError","binaryString","setBinaryString","binaryError","setBinaryError","binaryRanklistString","setBinaryRanklistString","binaryRanklistError","setBinaryRanklistError","show","setShow","useEffect","getInitialPreferenceForSignature","undefined","toJson","Array","from","Uint8Array","toBinary","ArrayBuffer","value","pad","toString","join","toBinaryRanklist","s","n","repeat","Math","max","length","stringToArrayBuffer","str","buffer","i","parseInt","substring","className","onSignatureUpdated","detail","onClick","allowEmptyRows","onPreferenceChanged","disabled","onChange","json","parser","WorldPreferenceParserFactory","fromJson","message","handleJsonChanged","target","binary","fromBinary","data","handleBinaryChanged","fromBinaryRanklist","handleBinaryRanklistChanged","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0ffb159.chunk.js","sourcesContent":["var map = {\n\t\"./create-signature.entry.js\": [\n\t\t30,\n\t\t5\n\t],\n\t\"./formula-input.entry.js\": [\n\t\t31,\n\t\t6\n\t],\n\t\"./propositional-world-component.entry.js\": [\n\t\t32,\n\t\t7\n\t],\n\t\"./show-signature.entry.js\": [\n\t\t33,\n\t\t8\n\t],\n\t\"./world-preference-component.entry.js\": [\n\t\t34,\n\t\t9\n\t],\n\t\"./world-selector.entry.js\": [\n\t\t35,\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 28;\nmodule.exports = webpackAsyncContext;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n    getInitialPreferenceForSignature,\n    PropositionalVariable,\n    WorldPreference,\n    WorldPreferenceParserFactory,\n} from \"@rhazn/logic-ts\";\nimport {\n    CreateSignature,\n    ShowSignature,\n    WorldPreferenceComponent,\n} from \"@rhazn/logic-components-react\";\n\nfunction App() {\n    const [signature, setSignature] = useState<Set<PropositionalVariable>>(\n        new Set([\"a\"] as PropositionalVariable[])\n    );\n    const [preference, setPreference] = useState<WorldPreference>();\n    const [isTPO, setIsTpo] = useState<boolean>(false);\n\n    const [jsonString, setJsonString] = useState<string | undefined>();\n    const [jsonError, setJsonError] = useState<string | undefined>();\n\n    const [binaryString, setBinaryString] = useState<string | undefined>();\n    const [binaryError, setBinaryError] = useState<string | undefined>();\n\n    const [binaryRanklistString, setBinaryRanklistString] = useState<\n        string | undefined\n    >();\n    const [binaryRanklistError, setBinaryRanklistError] = useState<\n        string | undefined\n    >();\n\n    const [show, setShow] = useState<\"json\" | \"binary\" | \"binaryranklist\">(\n        \"json\"\n    );\n\n    useEffect(() => {\n        setPreference(getInitialPreferenceForSignature(signature));\n    }, [signature]);\n\n    useEffect(() => {\n        setJsonError(undefined);\n        setBinaryError(undefined);\n        setBinaryRanklistError(undefined);\n\n        setJsonString(preference?.toJson());\n        setBinaryString(\n            Array.from(\n                new Uint8Array(\n                    preference ? preference.toBinary() : new ArrayBuffer(0)\n                )\n            )\n                .map((value) => pad(value.toString(2), 8))\n                .join(\"\")\n        );\n        setBinaryRanklistString(\n            Array.from(\n                new Uint8Array(\n                    preference\n                        ? preference.toBinaryRanklist()\n                        : new ArrayBuffer(0)\n                )\n            )\n                .map((value) => pad(value.toString(2), 8))\n                .join(\"\")\n        );\n    }, [preference]);\n\n    const handleJsonChanged = (json: string) => {\n        setJsonString(json);\n        setJsonError(undefined);\n\n        if (json) {\n            const parser = new WorldPreferenceParserFactory(signature);\n\n            try {\n                const preference = parser.fromJson(json);\n\n                if (preference) {\n                    setPreference(preference);\n                }\n            } catch (e: any) {\n                setJsonError(e.message);\n            }\n        }\n    };\n\n    const handleBinaryChanged = (binary: string) => {\n        setBinaryString(binary);\n        setBinaryError(undefined);\n\n        if (binary) {\n            const parser = new WorldPreferenceParserFactory(signature);\n\n            try {\n                const preference = parser.fromBinary(\n                    stringToArrayBuffer(binary)\n                );\n\n                if (preference && preference.data.length > 0) {\n                    setPreference(preference);\n                }\n            } catch (e: any) {\n                setBinaryError(e.message);\n            }\n        }\n    };\n\n    const handleBinaryRanklistChanged = (binary: string) => {\n        setBinaryRanklistString(binary);\n        setBinaryRanklistError(undefined);\n\n        if (binary) {\n            const parser = new WorldPreferenceParserFactory(signature);\n\n            try {\n                const preference = parser.fromBinaryRanklist(\n                    stringToArrayBuffer(binary)\n                );\n\n                if (preference && preference.data.length > 0) {\n                    setPreference(preference);\n                }\n            } catch (e: any) {\n                setBinaryRanklistError(e.message);\n            }\n        }\n    };\n\n    const pad = (s: string, n: number): string =>\n        \"0\".repeat(Math.max(0, n - s.length)) + s;\n\n    const stringToArrayBuffer = (str: string): ArrayBuffer => {\n        const buffer = new Uint8Array(str.length / 8);\n\n        for (let i = 0; i < buffer.length; i++) {\n            buffer[i] = parseInt(str.substring(i * 8, i * 8 + 8), 2);\n        }\n\n        return buffer.buffer;\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">Preference Builder</header>\n            <h1>Config</h1>\n            <div className=\"flex-row\">\n                <div className=\"flex-column\">\n                    <h2>Current Signature</h2>\n                    <ShowSignature signature={signature} />\n                </div>\n\n                <div className=\"flex-column\">\n                    <h2>Create new signature</h2>\n                    <CreateSignature\n                        onSignatureUpdated={(\n                            e: CustomEvent<Set<PropositionalVariable>>\n                        ) => setSignature(e.detail)}\n                    />\n                </div>\n\n                <div className=\"flex-column\">\n                    <h2>Allow empty ranks?</h2>\n                    <button onClick={() => setIsTpo(!isTPO)}>\n                        {isTPO ? \"No\" : \"Yes\"}\n                    </button>\n                </div>\n            </div>\n            <h1>Preference</h1>\n            <div className=\"flex-row\">\n                <div className=\"flex-column\">\n                    <h2>Preference order</h2>\n                    <WorldPreferenceComponent\n                        preference={preference}\n                        allowEmptyRows={!isTPO}\n                        onPreferenceChanged={(e: any) =>\n                            setPreference(e.detail as any)\n                        }\n                    />\n                </div>\n                <div className=\"flex-column\">\n                    <div className=\"flex-row\">\n                        <button\n                            disabled={show === \"json\"}\n                            onClick={() => setShow(\"json\")}\n                        >\n                            Show JSON\n                        </button>\n                        <button\n                            disabled={show === \"binary\"}\n                            onClick={() => setShow(\"binary\")}\n                        >\n                            Show Binary Worldlist\n                        </button>\n                        <button\n                            disabled={show === \"binaryranklist\"}\n                            onClick={() => setShow(\"binaryranklist\")}\n                        >\n                            Show Binary Ranklist\n                        </button>\n                    </div>\n                    <div className=\"flex-row\">\n                        {show === \"json\" && (\n                            <div className=\"flex-column\">\n                                <h2>As JSON</h2>\n                                {jsonError && (\n                                    <span className=\"error\">{jsonError}</span>\n                                )}\n                                <textarea\n                                    className=\"code text-representation\"\n                                    value={jsonString}\n                                    onChange={(e) =>\n                                        handleJsonChanged(e.target.value)\n                                    }\n                                ></textarea>\n                            </div>\n                        )}\n                        {show === \"binary\" && (\n                            <div className=\"flex-column\">\n                                <h2>As Binary Worldlist</h2>\n                                {binaryError && (\n                                    <span className=\"error\">{binaryError}</span>\n                                )}\n                                <textarea\n                                    className=\"code text-representation\"\n                                    value={binaryString}\n                                    onChange={(e) =>\n                                        handleBinaryChanged(e.target.value)\n                                    }\n                                ></textarea>\n                            </div>\n                        )}\n                        {show === \"binaryranklist\" && (\n                            <div className=\"flex-column\">\n                                <h2>As Binary Ranklist</h2>\n                                {binaryRanklistError && (\n                                    <span className=\"error\">\n                                        {binaryRanklistError}\n                                    </span>\n                                )}\n                                <textarea\n                                    className=\"code text-representation\"\n                                    value={binaryRanklistString}\n                                    onChange={(e) =>\n                                        handleBinaryRanklistChanged(\n                                            e.target.value\n                                        )\n                                    }\n                                ></textarea>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}